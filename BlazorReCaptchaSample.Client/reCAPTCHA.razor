@using  System.ComponentModel
@inject IJSRuntime JS

<div id="@UniqueId"></div>

@code {

    [Parameter]
    private string SiteKey { get; set; }

    [Parameter]
    private EventCallback<string> OnSuccess { get; set; }

    [Parameter]
    private EventCallback OnExpired { get; set; }

    private string UniqueId = Guid.NewGuid().ToString();

    private int WidgetId;

    protected override async Task OnInitAsync()
    {
        await JS.InvokeAsync<object>("My.reCAPTCHA.init");
        WidgetId = await JS.InvokeAsync<int>("My.reCAPTCHA.render", DotNetObjectRef.Create(this), UniqueId, SiteKey);
    }

    [JSInvokable, EditorBrowsable(EditorBrowsableState.Never)]
    public void CallbackOnSuccess(string response)
    {
        if (OnSuccess.HasDelegate)
        {
            OnSuccess.InvokeAsync(response);
        }
    }

    [JSInvokable, EditorBrowsable(EditorBrowsableState.Never)]
    public void CallbackOnExpired()
    {
        if (OnExpired.HasDelegate)
        {
            OnExpired.InvokeAsync(null);
        }
    }

    public Task<string> GetResponseAsync()
    {
        return JS.InvokeAsync<string>("My.reCAPTCHA.getResponse", WidgetId);
    }
}